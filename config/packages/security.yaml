security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users_in_memory: { memory: null }

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: users_in_memory
      #form_login:
      #login_path: /login
      #check_path: /login
      #logout:
      #path: logout
      #target: # Replace with your homepage route

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used

  role_hierarchy:
    ROLE_RESPONSABLE_FLOTTE: [ROLE_USER]
    ROLE_DIRECTEUR_COMMERCIAL: [ROLE_USER]
    ROLE_DIRECTEUR: [ROLE_USER]

  access_control:
    # Allow everyone to access the login page
    #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

    # Allow users with ROLE_RESPONSABLE_FLOTTE or ROLE_DIRECTEUR to access all paths
    #- { path: ^/, roles: [ROLE_RESPONSABLE_FLOTTE, ROLE_DIRECTEUR] }

    # Allow users with ROLE_DIRECTEUR_COMMERCIAL to access only certain paths
    #- { path: ^/restricted-path, roles: ROLE_DIRECTEUR_COMMERCIAL } # Replace /restricted-path with actual paths

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
